먼저

npm init

을 실행한다.

다음 명령어를 이용해 Webpack을 전역과 프로젝트 수준에서 설치한다.
프로젝트 수준에서는 개발 의존성으로 설치하기 위해 --save-dev 옵션을 이용한다.

[전역설치]
// 이미 PC에 전역 설치를 했다면 '개발 의존성 설치'만 진행한다
npm install -g webpack (Windows)
sudo npm install -g webpack (macOs)

[개발 의존성 설치]
npm install --save-dev webpack

이제 Babel 트랜스파일러와 Webpack에서 이용하기 위한 babel-loader를 설치한다.
이것들은 개발 의존성으로 프로젝트 수준에서 설치한다. 추가된 개발 의존성 정보는 package.json에 반영된다.
개발 의존성으로 설치한 패키지들은 트랜스파일, 번들링시에만 사용된다.

npm install --save-dev babel babel-core babel-loader babel-preset-es2015

이 예제를 만들기 위해서는
public directory에 dist directory를 제외하고 모두 작성한다.
다음으로 package.json에서 다음과 같이 "build"객체를 추가한다.

...
"scripts": {
    "build": "webpack",
    "test": "..."
},
...

그리고 프로젝트의 위치(여기에서는 WebpackFirstProject)에서 다음을 실행한다. (Webpack을 실행하는 방법이다)

npm run build
(npm run "name" : scripts객체의 "name"의 value를 실행한다.)

그러면 번들링(bundling)을 수행하며 결과는 public/dist/main.js 에 저장된다.
(이 경로는 webpack.config.js에서 output에 설정한 부분이다)

그리고 public/index.html 을 실행해본다.


// Webpack 개발 서버 설정
개발 중에 코드가 변경될 때마다 매번 새롭게 Webpack 명령을 수행하는 것은 불편할 수 있다.
코드가 변경되면 즉시 브라우저 화면에 반영되도록 하기 위해 Webpack 개발 서버(webpack-dev-server)를 사용할 수 있다.
Webpack 개발 서버는 Node.js와 Express 프레임워크를 기반으로 작동되는 개발용 서버이다.
Webpack을 기반으로 작동하며, 코드가 변경될 때 자동으로 업데이트 되는 HMR(Hot Module Replacement) 기능을 자체적으로 제공하므로
빠르게 개발하려는 경우 필수적으로 사용된다.

Webpack 개발 서버를 사용하기 위해 

npm install --save-dev webpack-dev-server

를 실행하고 package.json의 script에 다음과 같이 "start" 옵션을 추가한다.

...
"scripts": {
    "build": "webpack",
    "start": "node_module/.bin/webpack-dev-server --open --hot",
    "test": "..."
},
...

--open 옵션은 브라우저가 자동으로 열리도록 하며, --hot 옵션은 HMR(Hot Module Replacement)을 지원하는 옵션이다.
이제 webpack.config.js에 devServer 옵션을 추가한다.

...
plugins: [
    ...
],
devServer: {
    contentBase: "./public/",
    port: 3000,
    historyApiFallback: true
}
...

1) contentBase
contentBase 옵션은 웹서버 루트로 지정할 디렉터리 경로를 설정한다. 생략하면 프로젝트 디렉터리가 지정된다.

2) port
포트 번호를 지정하며, 지정하지 않으면 기본값은 8080이다.

3) historyApiFallback
브라우저에서 이전 상태로 이동하려할 때 URI가 존재하지 않으면 404에러가 발생한다.
이 경우에 기본 페이지(index.html)로 이동을 자동화시킬 것인지 여부를 지정한다.

npm run start

명령어로 Webpack 개발 서버를 구동한다. 브라우저가 자동으로 열리면서 index.html이 화면에 나타난다.
그리고 VSCode에서 index.js를 비롯한 소스 코드를 변경하고 저장하면 즉시 화면에 반영된다(HMR). 


// Webpack 구성 파일의 기본 골격

varwebpack = require("webpack");
module.exports = {
    entry: {
        // 처음 로드하는 파일을 지정
    },
    output: {
        // 번들링된 결과물의 출력 방법을 지정
        // filename은 정적 문자열이 될 수도 있지만 entry 이름이 파일명에 반영되도록 "[name]"이라는 대체 문자를 이용할 수 있다.
    },
    module: {
        rules: [
            // 프로젝트 내부에서 사용하는 다양한 유형의 모듈을 수행하는 방법을 지정
        ]
    },
    plugins: [
        // 다양한 방법으로 Webpack 빌드 프로세스에 사용자가 지정한 작업을 추가할 수 있는 기능을 제공
    ],
    ...
}

1) entry
처음 로드하는 파일을 지정한다. 진입 파일은 단일 파일로 지정할 수도 있고, 여러 개의 파일을 지정할 수도 있다.
여러 개의 집입 파일을 지정할 때는 객체 형태로 지정하고, 단일 진입 파일일 때는 문자열로 파일의 경로를 지정한다.

예 :
[단일 진입 파일인 경우]
entry: __dirname + "/src/index.js"

[다중 진입 파일인 경우]
entry: {
    main: __dirname + "/src/index.js",
    app: __dirname + "/src/main.js"
}

다중 진입 파일인 경우, 진입 파일 개수만큼의 번들링된 자바스크립트 코드를 만들어낸다.
프로젝트 디렉터리(__dirname)와 문자열로 전달된 경로를 조합하여 경로를 지정한다.

2) output
번들링된 결과물의 출력 방법을 지정한다. path 옵션은 번들링된 파일의 저장 경로이다. publicPath 옵션에는
웹서버에서 이용될 때의 사용 경로를 지정한다. filename으로는 생성하는 파일의 파일명을 지정한다.
filename은 정적 문자열이 될 수도 있지만 entry 이름이 파일명에 반영되도록 "[name]"이라는 대체 문자를 이용할 수 있다.

예 :
output: {
    path: __dirname + "/public/dist/",
    filename: "[name].js",
    publicPath: "/dist"
}

3) module
이 옵션에서는 프로젝트 내부에서 사용하는 다양한 유형의 모듈을 수행하는 방법을 지정한다. 
특히 이 프로젝트에서는 module옵션에서 가장 많이 설정하는 내용인 로더(loader)에 ES2015를 이전 버전의 자바스크립트 코드로
트랜스파일(transpile)할 수 있도록 babel-loader를 사용하도록 작성했다.
module 옵션에 rules 배열을 추가하고 규칙(rule)을 추가한다.

예 :
module: {
    rules: [
        {
            test: /\.js$/,
            loader: "babel-loader",
            exclude: /node-modules/
        }
    ]
}

위 예에서는 Babel을 이용해 트랜스파일하도록 babel-loader를 지정한다. 내부의 test 옵션에는 정규식을 지정한다.
/\.js$/ 정규식은 파일명이 .js로 끝나는 경우로 한정한다. 
exclude에는 트랜스마일 대상에 포함시키지 않을 파일명의 정규식 패턴을 지정한다.

4) plugins
plugins 옵션은 다양한 방법으로 Webpack 빌드 프로세스에 사용자가 지정한 작업을 추가할 수 있는 기능을 제공한다.
예를 들어 코드 난독화와 압축 기능을 제공하는 UglifyJsPlugin을 들 수 있다.

예 :
plugins : [
    new varwebpack.optimize.UglifyJsPlugin()
]