// 문자열에 포함된 숫자를 파싱하는 것은 '문자열 < - > 숫자' 강제변환 결과는 비슷하지만 중요한 차이가 있다.

var a = "30";
var b = "30px";

console.log('Number("30") : ', Number(30)); // 30
console.log('parseInt("30") : ', parseInt(30)); // 30
console.log('Number("30px") : ', Number("30px")); // NaN
console.log('parseInt("30px")', parseInt("30px")); // 30

// 문자열로부터 숫자 값의 파싱은 비 숫자형 문자(Non-Numeric Character)를 허용한다.
// 즉, 좌 -> 우 방향으로 파싱하다가 숫자 같지 않은 문자를 만나면 즉시 멈춘다.
// 반면, 강제 변환은 비 숫자형 문자를 허용하지 않기 때문에 NaN를 반환한다.

// 파싱은 강제변환의 대안이 될 수 없다. 비슷해 보여도 목적 자체가 다르다.
// 우측에 비 숫자형 문자가 있을지 확실하지 않거나 별로 상관없다면 문자열을 숫자로 파싱한다.
// 반드시 숫자여야만 하고 "30px" 같은 값은 되돌려야 한다면 문자열을 숫자로 강제변환한다.

// parseFloat()는 parseInt()의 쌍둥이로 문자열에서 부동 소수점 숫자를 추출한다.

// 절대로 parseInt()에 비 문자열 값을 넘기지 말자.

// ES5 이전 버전에서 주의해야할 점이 하나 있다.

// parseInt의 두 번째 인자에는 기수(radix; 문자열을 숫자로 해석 시 사용되는 진법 종류)를 지정하지 않으면
// 문자열의 첫 번째 문자만 보고 마음대로 추정했다. (ES5부터는 10진법이 기본)

// ES5 이전에서는 "09"를 파싱할 때 8진수로 판단한다. 
// 여기 ES6는 10진법이 기본이므로 ES5이전의 parseInt를 보여주기 위해 8을 두번째 인자로 넘겨준다.
var hour = parseInt("09", 8); 
var minute = parseInt("08", 8);

console.log("The time you selected was : " + hour + ":" + minute);
// 8, 9 모두 8진법에서 사용하는 숫자가 아니기 떄문에 0:0 이 결과로 출력된다.


