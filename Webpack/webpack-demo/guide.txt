출처 : https://webpack.js.org/guides/getting-started/

---------------------------------------------------------------------------------------------

# src/index.js

  function component() {
    var element = document.createElement('div');

    // Lodash, currently included via a script, is required for this line to work
    element.innerHTML = _.join(['Hello', 'webpack'], ' ');

    return element;
  }

  document.body.appendChild(component());

# dist/index.html

  <!doctype html>
  <html>
   <head>
     <title>Getting Started</title>
     <script src="https://unpkg.com/lodash@4.16.6"></script>
   </head>
   <body>
     <script src="./src/index.js"></script>
   </body>
  </html>

자바스크립트 프로젝트를 위와 같이 관리하면 다음과 같은 문제가 있다.

1. 딱 보기에는 스크립트(index.js)가 외부 라이브러리(lodash)에 의존적인지 알 수 없다.
2. 의존성이 있는 외부 라이브러리가 사라지거나 잘못된 순서로 포함된다면 앱은 동작하지 않을 수 있다.
3. 만약 의존성을 포함했으나 사용하지 않는다면 브라우저는 필요없는 코드를 강제로 다운로드하게 된다.

---------------------------------------------------------------------------------------------

package.json 에서 

+ "private": true,
- "main": "index.js",

를 한 것은 우발적 게시(accidental publish)를 막기 위함이다.
# 참고 : https://docs.npmjs.com/files/package.json#main
# 참고 : https://docs.npmjs.com/files/package.json#private

---------------------------------------------------------------------------------------------

# src/index.js

+ import _ from 'lodash';
+
  function component() {
    var element = document.createElement('div');

-   // Lodash, currently included via a script, is required for this line to work
+   // Lodash, now imported by this script
    element.innerHTML = _.join(['Hello', 'webpack'], ' ');

    return element;
  }

  document.body.appendChild(component());

# dist/index.html

  <!doctype html>
  <html>
   <head>
     <title>Getting Started</title>
-    <script src="https://unpkg.com/lodash@4.16.6"></script>
   </head>
   <body>
-    <script src="./src/index.js"></script>
+    <script src="bundle.js"></script>
   </body>
  </html>

이렇게 설정함으로써 index.js는 명확하게 lodash를 요구하고, _ 로 바인딩 한다.
한 모듈(index.js)이 필요한 의존성들(lodash)을 명시(import _ from 'lodash')함으로써 
webpack은 이 정보를 의존성 그래프(dependencies graph)를 빌드하는데 사용할 수 있다.

---------------------------------------------------------------------------------------------

webpack "entry name" "ouput name"
을 실행하면 entry name에 있는 의존성들을 output name에 번들링한다.
그리고 entry name에서는 output name만을 참조하여 의존성을 유지한다.
따라서 다음과 같이 번들링 실행 가능

webpack ./src/index.js ./dist/bundle.js

---------------------------------------------------------------------------------------------

위 처럼 매번 작성하면 번거롭고 실수의 가능성이 높다.
webpack.config.js 작성하고 

webpack --config webpack.config.js
또는
webpack

을 실행한다.

또는 package.json 파일의 "scripts"에 

"build": "webpack"

을 작성하여

npm run build 

를 실행한다.