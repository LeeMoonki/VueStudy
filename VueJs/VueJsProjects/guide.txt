// 대규모 웹애플리케이션을 개발할 때는 Webpack 또는 pwa 템플릿을 사용할 것을 권장한다.

// Vue-CLI boilerplate

Vue-CLI를 통해서 사용할 수 있는 Webpack 기반 템플릿은 webpack, webpack-simple, pwa 등 3가지이다.
이중에서 webpack-simple 템플릿을 다음처럼 사용한다.

vue init webpack-simple "project name"
(이 디렉토리에서 예 : vue init webpack-simple SingleFileComponent)

(이 디렉토리에서 위 명령어를 실행한 세부 내용은 다음과 같다.

vue init webpack-simple SingleFileComponent

? Project name sfc
? Project description A Vue.js project
? Author
? License MIT
? Use sass? No

   vue-cli · Generated "SingleFileComponent".

   To get started:

     cd SingleFileComponent
     npm install
     npm run dev
)

다음에 생성되는 package.json 파일을 살펴보면 다음과 같이 새로운 내용들이 보인다.

...
"scripts": {
    "dev": "cross-env NODE_ENV=development webpack-dev-server --open --hot",
    "build": "cross-env NODE_ENV=production webpack --progress --hide-modules"
}
...
"devDependencies": {
    "babel-core": "^6.26.0",
    "babel-loader": "^7.1.2",
    "babel-preset-env": "^1.6.0",
    "babel-preset-stage-3": "^6.24.1",
    "cross-env": "^5.0.5",
    "css-loader": "^0.28.7",
    "file-loader": "^1.1.4",
    "vue-loader": "^13.0.5",
    "vue-template-compiler": "^2.4.4",
    "webpack": "^3.6.0",
    "webpack-dev-server": "^2.9.1"
  }

새로 눈에 띄는 것들을 살펴보면 다음과 같다.

-- 라이브러리 설명

1) cross-env 
여러 플랫폼에 걸쳐서 환경 변수를 설정하고 사용하는 스크립트를 실행한다. 이것을 사용하는 예는 동일한 package.json에서 찾을 수 있다.
package.json 내부에 scripts 옵션을 보면 dev, build 옵션에 cross-env를 이용해 NODE_ENV 환경 변수를 
development, production으로 지정하고 실행하는 것을 볼 수 있다. 이 정보는 webpack.config.js에서 다음과 같이 조건 처리하고 있다.

At webpack.config.js

...
if (process.env.NODE_ENV === 'production') { ... }
...

2) css-loader
컴포넌트에서 css 파일을 파일명을 이용해 직접 import 구문으로 로드하여 사용하는 방법을 제공한다. 
import된 css파일에 정의된 클래스는 객체처럼 이용할 수 있다.

3) file-loader
정적 자원(이미지 등의 파일)을 import 구문을 이용해 코드로 로드할 수 있다. 로드된 파일은 Webpack에 의해
번들링된다. 번들링될 때 파일명에 MD5 해시값을 적용할 수 있다. 이 로더에 대한 설정은 webpack.config.js의 다음 영역에서 제공한다.

At webpack.config.js

...
module: {
    rules: [
      ...
      {
        test: /\.(png|jpg|gif|svg)$/,
        loader: 'file-loader',
        options: {
          name: '[name].[ext]?[hash]'
        }
      }
      ...
    ]
  }
...

현재 Webpack 구성에섯 확장자가 png, jpg, gif, svg인 경우에만 file-loader가 적용된다.
이 보일러플레이트 코드에서는 assets/logo.png 파일이 번들링 된다.
npm run build 명령을 수행해보면 이미지가 함께 번들링된 것을 확일할 수 있다.

4) vue-loader
확장자가 .vue인 단일 파일 컴포넌트(Single File Component) 파일을 트랜스파일하고 로드하는 기능을 수행한다.

5) vue-template-compiler
Vue 컴포넌트 내부의 템플릿 문자열을 트랜스파일하는 기능을 수행한다.

-- // 라이브러리 설명

npm run dev 
명령어로 실행하면 Webpack 개발 서버가 시작되면서 브라우저 창이 실행된다.



// 단일 파일 컴포넌트 (.vue) 의 특징 
.vue 파일은 src 내부에서 디렉토리 등을 통해 관리한다.

-- 특징
1) <template>에는 id 특성을 부여하지 않는다.

2) <script> 영역에서는 Vue 컴포넌트의 template을 지정하지 않으며, Vue.component()로 이름과 template 속성을 지정하지 않는다.
반면에 name 속성을 지정 할 수 있으며, 반드시 객체를 export해야 한다.

3) 컴포넌트에서 사용할 스타일은 <style> 내부에 작성합니다.
-- // 특징

.vue 파일을 통해 만든 컴포넌트를 화면에 담기 위해 src 하위의 main.js를 사용한다.
main.js는 컴포넌트를 렌더링한 결과물을 #app인 요소에 출력한다.

At main.js

import Vue from 'vue'
import App from './App.vue'

new Vue({
  el: '#app',
  render: h => h(App)
})

다음은 프로젝트 파일 하위에 있는 index.html 파일이다. App.vue를 비롯한 .js 파일들은 트랜스파일되고,
번들링되어 ./dist/build.js 파일을 생성한다. 이것을 참조해서 페이지가 작성되는 것이다.
webpack.config.js에서는 src/main.js가 엔트리로 지정되어 있으므로 main.js를 시작점으로 참조하여 번들링할 것이다.

At webpack.config.js

module.exports = {
  entry: './src/main.js',
  output: {
    path: path.resolve(__dirname, './dist'),
    publicPath: '/dist/',
    filename: 'build.js'
  }
  ...
}

At Index.html

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>sfc</title>
  </head>
  <body>
    <div id="app"></div>
    <script src="/dist/build.js"></script>
  </body>
</html>


프로젝트 실행 : npm dev run
프로젝트 종료 : ctrl + c